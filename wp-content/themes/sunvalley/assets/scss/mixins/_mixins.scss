// FLUID FONT SIZE
@mixin responsive-font($responsive, $min, $max: false, $fallback: false) {
  $responsive-unitless: $responsive / ($responsive - $responsive + 1);
  $dimension: if(unit($responsive) == 'vh', 'height', 'width');
  $min-breakpoint: $min / $responsive-unitless * 100;
  
  @media (max-#{$dimension}: #{$min-breakpoint}) {
    font-size: $min;
  }
  
  @if $max {
    $max-breakpoint: $max / $responsive-unitless * 100;
    
    @media (min-#{$dimension}: #{$max-breakpoint}) {
      font-size: $max;
    }
  }
  
  @if $fallback {
    font-size: $fallback;
  }
  
  font-size: $responsive;
}

@function strip-unit($value) {
  @return $value / ($value * 0 + 1);
}

//BACKGROUND OPACITY
@mixin transparent-bg($color: #000, $value: 0.5) {
  $start: "rgb(";
  $end: ")";

  background: #{$start}red($color), green($color), unquote("#{blue($color)}#{$end}");
  background: rgba($color, $value);
}

//MATERIAL SHADOWS
@mixin boxShadow($level: 1) {
  @if $level == 1 {
    box-shadow: 0 1px 3px rgba(0, 0, 0, 0.12), 0 1px 2px rgba(0, 0, 0, 0.24);
  }

  @if $level == 2 {
    box-shadow: 0 3px 6px rgba(0, 0, 0, 0.16), 0 3px 6px rgba(0, 0, 0, 0.23);
  }

  @if $level == 3 {
    box-shadow: 0 10px 20px rgba(0, 0, 0, 0.19), 0 6px 6px rgba(0, 0, 0, 0.23);
  }

  @if $level == 4 {
    box-shadow: 0 14px 28px rgba(0, 0, 0, 0.25), 0 10px 10px rgba(0, 0, 0, 0.22);
  }

  @if $level == 5 {
    box-shadow: 0 19px 38px rgba(0, 0, 0, 0.3), 0 15px 12px rgba(0, 0, 0, 0.22);
  }
}
/// Vertically centers the element inside of its first non-static parent,
/// @link http://www.sitepoint.com/centering-with-sass/ Centering With Sass
@mixin vertical-center {
  position: absolute;
  top: 50%;
  transform: translateY(-50%);
}

/// Horizontally centers the element inside of its first non-static parent,
/// @link http://www.sitepoint.com/centering-with-sass/ Centering With Sass
@mixin horizontal-center {
  position: absolute;
  left: 50%;
  transform: translateX(-50%);
}

/// Absolutely centers the element inside of its first non-static parent,
/// @link http://www.sitepoint.com/centering-with-sass/ Centering With Sass
@mixin absolute-center {
  position: absolute;
  top: 50%;
  left: 50%;
  transform: translate(-50%, -50%);
}

//TARGET FIREFOX ONLY
@mixin browser($browsers: Mozilla) {
  @each $browser in $browsers {
    html[data-browser*="#{$browser}"] & {
      @content;
    }
  }
}
//CARD STACK
@mixin card-stack( $card-color: white, $shadow-color: black ) {
	box-shadow: 0 0.0625em 0.1875em 0 rgba( $shadow-color, 0.1 ),
	            0 0.5em 0 -0.25em shade( $card-color, 5% ),
	            0 0.5em 0.1875em -0.25em rgba( $shadow-color, 0.1 ),
	            0 1em 0 -0.5em shade( $card-color, 10% ),
	            0 1em 0.1875em -0.5em rgba( $shadow-color, 0.1 );
}

//LIGHTEN COLOR
@function tint($color, $percentage) {
  @return mix(white, $color, $percentage);
}

//RETINA
@mixin retina($path, $cap: 2, $size: auto auto, $extras: null) {

  /*
   * Set a counter and get the length of the image path.
   */
  $position: -1;
  $strpath: '#{$path}';
  $length: str-length($strpath);

  /*
   * Loop ver the image path and figure out the
   * position of the dot where the extension begins.
   */
  @for $i from $length through $length - 10{
      @if $position == -1 {
          $char : str-slice($strpath, $i, $i);
          @if str-index($char, ".") == 1 {
              $position: $i;
          }
      }
  }

  /*
   * If we were able to figure out where the extension is,
   * slice the path into a base and an extension. Use that to
   * calculate urls for different density environments. Set
   * values for different environments.
   */
  @if $position != -1 {
    $ext: str-slice($strpath, $position + 1, $length);
    $base: str-slice($strpath, 1, $position - 1);
    $at1x_path: "#{$base}.#{$ext}";
    $at2x_path: "#{$base}@2x.#{$ext}";

    /*
     * Set a base background for 1x environments.
     */
    background: url("#{$at1x_path}") $extras;
    background-size: $size;

    /*
     * Create an @2x-ish media query.
     */
    @media all and (-webkit-min-device-pixel-ratio : 1.5),
           all and (-o-min-device-pixel-ratio: 3/2),
           all and (min--moz-device-pixel-ratio: 1.5),
           all and (min-device-pixel-ratio: 1.5) {
             background      : url("#{$at2x_path}") $extras;
             background-size : $size;
    }

    /*
     * Create media queries for all environments that the user has
     * provided images for.
     */
    @if $cap >= 2 {
      @for $env from 2 through $cap {
        $suffix: "@#{$env}x";
        @media (-webkit-min-device-pixel-ratio: $env),
               (min-resolution: $env * 96dpi) {
                 background      : url("#{$base}#{$suffix}.#{$ext}") $extras;
                 background-size : $size;
        }
      }
    }

  /*
   * If anything went wrong trying to separate the file from its
   * extension, set a background value without doing anything to it.
   */
  } @else {
    background: url("#{$path}") $extras;
    background-size: $size;
  }

}

@mixin textShadow($color, $size) {
    $shadow: 0 0 0 $color;
    @for $i from 1 through $size {
        $shadow: #{$shadow}, #{$i}px #{$i}px #{$color};
    }
    text-shadow: $shadow;
	-webkit-text-stroke-color: $white;
	-webkit-text-stroke-width: 2.00px; 
}
/* IMPORT HEXAGON MIXIN */
@import "hex";